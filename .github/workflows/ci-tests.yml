name: CI Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual test runs

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testadmin
          MONGO_INITDB_ROOT_PASSWORD: testpassword
          MONGO_INITDB_DATABASE: saasit_test
        ports:
          - 27017:27017
        options: --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          timeout 120 bash -c 'until mongosh --host localhost:27017 --username testadmin --password testpassword --authenticationDatabase admin --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do 
            echo "MongoDB not ready, waiting..."
            sleep 2
          done'
          echo "✅ MongoDB is ready!"

      - name: Run backend unit tests
        run: |
          cd backend
          MONGO_URL=mongodb://testadmin:testpassword@localhost:27017/saasit_test?authSource=admin \
          DB_NAME=saasit_test \
          PYTHONPATH=. \
          python -m pytest tests/unit/ -v --tb=short
        env:
          TESTING: true
          JWT_SECRET: test-jwt-secret-for-ci
          SECRET_KEY: test-secret-key-for-ci
          ANTHROPIC_API_KEY: test-key

      - name: Run backend integration tests
        run: |
          cd backend
          MONGO_URL=mongodb://testadmin:testpassword@localhost:27017/saasit_test?authSource=admin \
          DB_NAME=saasit_test \
          PYTHONPATH=. \
          python -m pytest tests/integration/ -v --tb=short
        env:
          TESTING: true
          JWT_SECRET: test-jwt-secret-for-ci
          SECRET_KEY: test-secret-key-for-ci
          ANTHROPIC_API_KEY: test-key

      - name: Run backend E2E tests
        run: |
          cd backend
          MONGO_URL=mongodb://testadmin:testpassword@localhost:27017/saasit_test?authSource=admin \
          DB_NAME=saasit_test \
          PYTHONPATH=. \
          python -m pytest tests/e2e/ -v --tb=short
        env:
          TESTING: true
          JWT_SECRET: test-jwt-secret-for-ci
          SECRET_KEY: test-secret-key-for-ci
          ANTHROPIC_API_KEY: test-key

      - name: Run backend security tests
        run: |
          cd backend
          MONGO_URL=mongodb://testadmin:testpassword@localhost:27017/saasit_test?authSource=admin \
          DB_NAME=saasit_test \
          PYTHONPATH=. \
          python -m pytest tests/security/ -v --tb=short
        env:
          TESTING: true
          JWT_SECRET: test-jwt-secret-for-ci
          SECRET_KEY: test-secret-key-for-ci
          ANTHROPIC_API_KEY: test-key

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/test-reports/
          retention-days: 30

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend build test
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: https://saasit-ai-backend-dgoldman.fly.dev
          REACT_APP_CLERK_PUBLISHABLE_KEY: pk_test_Z3Jvd2luZy1maXJlZmx5LTk5LmNsZXJrLmFjY291bnRzLmRldiQ
          CI: true

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Run frontend E2E tests
        run: |
          cd frontend
          npm run test:e2e:ci
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:e2e:accessibility
        env:
          CI: true

      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 30

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Run frontend linting (if configured)
        run: |
          cd frontend
          # Check if ESLint is configured
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npm run lint || echo "⚠️ ESLint not configured, skipping frontend linting"
          else
            echo "ℹ️ ESLint not configured, skipping frontend linting"
          fi

      - name: Run backend code formatting check
        run: |
          cd backend
          # Check Python code formatting
          python -m black --check . || echo "⚠️ Code formatting issues found"
          python -m isort --check-only . || echo "⚠️ Import sorting issues found"

      - name: Run backend type checking
        run: |
          cd backend
          # Run mypy type checking if configured
          if [ -f "mypy.ini" ] || [ -f ".mypy.ini" ] || [ -f "pyproject.toml" ]; then
            python -m mypy . || echo "⚠️ Type checking issues found"
          else
            echo "ℹ️ mypy not configured, skipping type checking"
          fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testadmin
          MONGO_INITDB_ROOT_PASSWORD: testpassword
          MONGO_INITDB_DATABASE: saasit_test
        ports:
          - 27017:27017
        options: --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install all dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Wait for MongoDB
        run: |
          timeout 120 bash -c 'until mongosh --host localhost:27017 --username testadmin --password testpassword --authenticationDatabase admin --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do sleep 2; done'

      - name: Start backend server
        run: |
          cd backend
          MONGO_URL=mongodb://testadmin:testpassword@localhost:27017/saasit_test?authSource=admin \
          DB_NAME=saasit_test \
          uvicorn server:app --host 0.0.0.0 --port 8000 &
          
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -s http://localhost:8000/ > /dev/null; do sleep 2; done'
          echo "✅ Backend server ready"
        env:
          TESTING: false
          JWT_SECRET: test-jwt-secret-for-integration
          SECRET_KEY: test-secret-key-for-integration
          ANTHROPIC_API_KEY: test-key
          CORS_ORIGINS: '["http://localhost:3000"]'

      - name: Run full integration test suite
        run: |
          cd frontend
          npx playwright install --with-deps
          PLAYWRIGHT_BASE_URL=http://localhost:3000 \
          API_BASE_URL=http://localhost:8000 \
          npm run test:e2e:ci
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:8000
          REACT_APP_CLERK_PUBLISHABLE_KEY: pk_test_Z3Jvd2luZy1maXJlZmx5LTk5LmNsZXJrLmFjY291bnRzLmRldiQ

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, lint-and-format, integration-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "🔍 Test Results Summary:"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Code Quality: ${{ needs.lint-and-format.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          
          if [ "${{ needs.backend-tests.result }}" != "success" ] || 
             [ "${{ needs.frontend-tests.result }}" != "success" ] || 
             [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "❌ Some tests failed - blocking merge"
            exit 1
          else
            echo "✅ All tests passed - ready for merge!"
          fi