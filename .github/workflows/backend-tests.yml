name: Backend Tests

on:
  push:
    branches: [ main, develop, ai-backend ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongo localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt', 'backend/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock httpx

    - name: Wait for MongoDB
      run: |
        until mongosh --host localhost:27017 --eval "db.adminCommand('ping')" &>/dev/null; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        echo "MongoDB is ready!"

    - name: Set up test environment
      working-directory: ./backend
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "MONGO_URL=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "DB_NAME=saasit_test_ci" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-only" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=test-api-key" >> $GITHUB_ENV

    - name: Run smoke tests
      working-directory: ./backend
      run: |
        python -m pytest tests/test_smoke.py -v

    - name: Run unit tests
      working-directory: ./backend
      run: |
        python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Run integration tests
      working-directory: ./backend
      run: |
        python -m pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term

    - name: Run security tests
      working-directory: ./backend
      run: |
        python -m pytest tests/security/ -v --cov=app --cov-append --cov-report=xml --cov-report=term

    - name: Run performance tests
      working-directory: ./backend
      run: |
        python -m pytest tests/performance/ -v --cov=app --cov-append --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Generate coverage report
      working-directory: ./backend
      run: |
        python -m pytest --cov=app --cov-report=html
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = root.attrib['line-rate']
            coverage_pct = float(coverage) * 100
            print(f'Coverage: {coverage_pct:.1f}%')
            print(f'**Coverage: {coverage_pct:.1f}%**' + ' 📊')
        except:
            print('Coverage report not available')
        " >> $GITHUB_STEP_SUMMARY

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/.coverage

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt

    - name: Run Safety dependency scan
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep scan
      working-directory: ./backend
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          backend/semgrep-report.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        pip install black isort flake8 mypy

    - name: Run Black formatting check
      working-directory: ./backend
      run: |
        black --check --diff app/ tests/

    - name: Run isort import sorting check
      working-directory: ./backend
      run: |
        isort --check-only --diff app/ tests/

    - name: Run Flake8 linting
      working-directory: ./backend
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      working-directory: ./backend
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional

  build-summary:
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🚀 SaasIt.ai Backend CI Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "- 🔍 Check test failures and fix failing tests" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "- 🔒 Review security scan results and address vulnerabilities" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "- 🎨 Fix code formatting and linting issues" >> $GITHUB_STEP_SUMMARY
        fi
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
          echo "- 🎉 All checks passed! Ready for deployment" >> $GITHUB_STEP_SUMMARY
        fi